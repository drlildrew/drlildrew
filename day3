Java Keyword: for data types • byte, short, int, long, float, double, char, boolean flow control • if, else, 
switch, case, default, for, do, while, break, continue, return modifiers • public, private, protected, static,
final, abstract, synchronized, native, strictfp, transient, volatile exception handling • try, catch, finally,
throw, throws, assert class related • class, package, import, extends, implements, interface Object related 
keywords, • new, instanceof, super, this Data types: byte: A data type that can store whole numbers from -128 
and 127 short: A data type that can store whole numbers from -32768 to 32767 int: A data type that can store 
whole numbers from -2147483648 to 2147483647 long: A data type that can store whole numbers from -9223372036854775808 
to 9223372036854775808 float: A data type that can store whole numbers from 3.4e−038 to 3.4e+038 double: A data type 
that can store whole numbers from 1.7e−308 to 1.7e+308 char: A data type that is used to store a single character 
boolean: A data type that can only store true and false values Flow control: if: Makes a conditional statement else: 
Used in conditional statements switch: Selects one of many code blocks to be executed case: Marks a block of code in 
switch statements default: Specifies the default block of code in a switch statement for: Create a for loop do: Used 
together with while to create a do-while loop while: Creates a while loop break: Breaks out of a loop or a switch 
block continue: Continues to the next iteration of a loop return: finished the execution of a method, and can be used 
to return a value from a method Modifies: public: An access modifier used for classes, attributes, methods and 
constructors, making them accessible by any other class Private: An access modifier used for attributes, methods 
and constructors, making them only accessible within the declared class Protected: An access modifier used for 
attributes, methods and constructors, making them accessible in the same package and subclasses Static: A non-access 
modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a 
class Final: A non-access modifier used for classes, attributes and methods, which makes them non-changeable 
(impossible to inherit or override) Abstract: A non-access modifier. Used for classes and methods: An abstract 
class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method 
can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)
Synchronized: A non-access modifier, which specifies that methods can only be accessed by one thread at a time Navtive: 
Specifies that a method is not implemented in the same Java source file (but in another language) Strictfp: Restrict 
the precision and rounding of floating point calculations Transient: A non-accesss modifier, which specifies that an 
attribute is not part of an object's persistent state Volatile: Indicates that an attribute is not cached thread-locally,
and is always read from the "main memory" Expectation Handling: Try: Creates a try...catch statement Catch: Catches 
exceptions generated by try statements Finally: Used with exceptions, a block of code that will be executed no matter 
if there is an exception or not Throw: Creates a custom error Throws: Indicates what exceptions may be thrown by a 
method Assert: For debugging Class related: Class: Class is a user-defined datatype that has its own data members and 
member functions Package: Declares a package Import: Used to import a package, class or interface Extends: Extends a 
class (indicates that a class is inherited from another class) Implements: Implements an interface Interface: Used to 
declare a special type of class that only contains abstract methods Object related: New: Creates new objects 
Instanceof: Checks whether an object is an instance of a specific class or an interface Super: Refers to superclass
(parent) objects This: Refers to the current object in a method or constructor

Unused Keywords: const: Defines a constant. Not in use – use final instead goto: Not in use, and has no function

Note: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.
